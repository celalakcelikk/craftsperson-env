"""
This file is the main class.
"""
import json
import os
from typing import Any

import toml
import validators
import xmltodict
import yaml
from dotenv import load_dotenv

from craftsperson_env.utils.contraster import CONFIG_FILE_TYPE_LIST, NAMING_CASE_LIST, OTHER_CONFIG_NAME_TYPE_LIST


class CraftsEnvConfig:
    """
    Task
    ----
    Environment variable parser.

    Parameters
    ----------
    None.

    Returns
    -------
    None.
    """

    def __init__(self):
        self.__naming_case_type = "upper-flat"
        self.__naming_case_join_type = ""
        self.__upper_lower = "upper"
        self.__is_remove_xml_first_level = False
        self.__xml_parameters = {}

    @staticmethod
    def __check_config_type(file_path: str) -> None:
        f"""
        This function check config file end-type on {', '.join(CONFIG_FILE_TYPE_LIST)}

        Parameters
        ----------
        file_path: str
            This parameter gets file location path.

        Returns
        -------
        None.
        """
        is_config_file_true = sum([file_path.endswith(end_type) for end_type in CONFIG_FILE_TYPE_LIST])
        assert is_config_file_true == 1, \
            f"Enter a config type that is not valid. Approved config types: {', '.join(CONFIG_FILE_TYPE_LIST)}"

    @staticmethod
    def __check_naming_case_type(naming_case_type: str) -> None:
        f"""
        This function check naming case type on {', '.join(NAMING_CASE_LIST)}

        Parameters
        ----------
        naming_case_type: str
            This parameter gets naming case types. For example, camel, flat, upper-flat.

        Returns
        -------
        None.
        """
        is_naming_case_type_true = naming_case_type in NAMING_CASE_LIST
        is_not_other_config_name_type_true = naming_case_type not in OTHER_CONFIG_NAME_TYPE_LIST
        assert is_naming_case_type_true is True or is_not_other_config_name_type_true is True, \
            f"Enter a case type that is not valid. Approved case types: {', '.join(NAMING_CASE_LIST)}"

    @staticmethod
    def __check_other_config_name_type(upper_lower: str) -> None:
        f"""
        This function check other config name type on {', '.join(OTHER_CONFIG_NAME_TYPE_LIST)}

        Parameters
        ----------
        upper_lower: str
            This parameter gets other config name types. For example, camel, flat, upper-flat.

        Returns
        -------
        None.
        """
        is_other_config_name_type_true = upper_lower in OTHER_CONFIG_NAME_TYPE_LIST
        assert is_other_config_name_type_true is True, \
            (f"Enter a other config name type that is not valid. Approved case types: "
             f"{', '.join(OTHER_CONFIG_NAME_TYPE_LIST)}")

    @staticmethod
    def __add_base_path(file_path: str, base_dir: str) -> str:
        """
        This function add full path on config file.

        Parameters
        ----------
        file_path: str
            This parameter gets file location path.
        base_dir: str
            This parameter gets the full path in the file.

        Returns
        -------
        file_path: str
            This return value is a complete path generated by the combination of file_path and base_dir parameters.
        """
        if validators.url(file_path) is False:
            if file_path.startswith("./"):
                file_path = file_path.replace('./', base_dir + '/')
            else:
                file_path = f"{base_dir}/{file_path}"

        return file_path

    def __arrangement_naming_case_type(self, key_list: list) -> str:
        """
        This function organizes by naming case type.

        Parameters
        ----------
        key_list: list
            This parameter gets env keys.

        Returns
        -------
        return variable: str
            This return value arrangement by naming case type.
        """
        if self.__naming_case_type is not OTHER_CONFIG_NAME_TYPE_LIST and self.__naming_case_type is not None:
            if self.__naming_case_type == "pascal":
                return "".join([key.capitalize() for key in key_list])

            elif self.__naming_case_type == "camel":
                return "".join([key.lower() if key_list.index(key) == 0 else key.capitalize() for key in key_list])

            elif self.__naming_case_type == "snake":
                return "_".join(key_list).lower()

            elif self.__naming_case_type == "kebab":
                return "-".join(key_list).lower()

            elif self.__naming_case_type == "flat":
                return "".join(key_list).lower()

            elif self.__naming_case_type == "upper-flat":
                return "".join(key_list).upper()

            elif self.__naming_case_type == "pascal-snake":
                return "_".join([key.capitalize() for key in key_list])

            elif self.__naming_case_type == "camel-snake":
                return "_".join([key.lower() if key_list.index(key) == 0 else key.capitalize() for key in key_list])

            elif self.__naming_case_type == "screaming-snake":
                return "_".join(key_list).upper()

            elif self.__naming_case_type == "train":
                return "-".join([key.capitalize() for key in key_list])

            elif self.__naming_case_type == "cobol":
                return "-".join(key_list).upper()

        else:
            if self.__upper_lower == "upper":
                return self.__naming_case_join_type.join(key_list).upper()

            elif self.__upper_lower == "lower":
                return self.__naming_case_join_type.join(key_list).lower()

    def __add_config_env(self, data: Any, keys: list = []):
        """
        This function adds config file key-value pairs to the 'os.environ' system.

        Parameters
        ----------
        data : Any
            This parameter gets env values.
        keys : list, optional
            This parameter gets env key list. The default is [].

        Returns
        -------
        None.
        """
        for key, value in data.items():
            key_list = keys + [key]

            if isinstance(value, str):
                try:
                    value = eval(value)
                    is_dict_value = True
                except Exception:
                    is_dict_value = False
            else:
                is_dict_value = False

            if isinstance(value, dict) and is_dict_value is False:
                self.__add_config_env(value, key_list)

            else:
                key_list = key_list[1:] if self.__is_remove_xml_first_level else key_list
                env_key = self.__arrangement_naming_case_type(key_list=key_list)

                if isinstance(value, dict):
                    os.environ[env_key] = f'"{value}"'

                else:
                    os.environ[env_key] = f'{value}'

    @staticmethod
    def __load_env_config_file(file_path: str):
        """
        This function loads env file to the 'os.environ' system.

        Parameters
        ----------
        file_path: str
            This parameter gets file location path.

        Returns
        -------
        None.
        """
        load_dotenv(file_path)

    def __load_yaml_config_file(self, file_path: str):
        """
        This function loads yaml file to the 'os.environ' system.

        Parameters
        ----------
        file_path: str
            This parameter gets file location path.

        Returns
        -------
        None.
        """
        with open(file_path, 'r') as file:
            config_dict = yaml.safe_load(file)
        self.__add_config_env(config_dict)

    def __load_json_config_file(self, file_path: str):
        """
        This function loads json file to the 'os.environ' system.

        Parameters
        ----------
        file_path: str
            This parameter gets file location path.

        Returns
        -------
        None.
        """
        with open(file_path, 'r') as file:
            config_dict = json.load(file)
        self.__add_config_env(config_dict)

    def __load_xml_config_file(self, file_path: str):
        """
        

        Parameters
        ----------
        file_path : str
            DESCRIPTION.

        Returns
        -------
        None.

        """
        with open(file_path, 'r') as file:
            config_dict = xmltodict.parse(file.read(), **self.__xml_parameters)
        self.__add_config_env(config_dict)

    def __load_toml_config_file(self, file_path: str):
        """
        

        Parameters
        ----------
        file_path : str
            DESCRIPTION.

        Returns
        -------
        None.

        """
        with open(file_path, 'r') as file:
            config_dict = toml.load(file)
        self.__add_config_env(config_dict)

    def use_config_file(self,
                        file_path: str,
                        base_dir: str = "./",
                        naming_case_type: str = None,
                        naming_case_join_type: str = "",
                        upper_lower: str = "upper",
                        is_remove_xml_first_level: bool = False,
                        xml_parameters: dict = {}
                        ):
        """
        

        Parameters
        ----------
        file_path : str
            DESCRIPTION.
        base_dir : str, optional
            DESCRIPTION. The default is "./".
        naming_case_type : str, optional
            DESCRIPTION. The default is None.
        naming_case_join_type : str, optional
            DESCRIPTION. The default is "".
        upper_lower : str, optional
            DESCRIPTION. The default is "upper".
        is_remove_xml_first_level : bool, optional
            DESCRIPTION. The default is False.
        xml_parameters : dict, optional
            DESCRIPTION. The default is {}.

        Returns
        -------
        None.

        """
        self.__check_config_type(file_path=file_path)
        file_path = self.__add_base_path(file_path=file_path, base_dir=base_dir)
        self.__check_naming_case_type(naming_case_type=naming_case_type)
        self.__check_other_config_name_type(upper_lower=upper_lower)

        self.__naming_case_type = naming_case_type
        self.__naming_case_join_type = naming_case_join_type
        self.__upper_lower = upper_lower
        self.__is_remove_xml_first_level = is_remove_xml_first_level
        self.__xml_parameters = xml_parameters

        if file_path.endswith("env"):
            self.__is_remove_xml_first_level = False
            self.__load_env_config_file(file_path=file_path)

        elif file_path.endswith("yaml"):
            self.__is_remove_xml_first_level = False
            self.__load_yaml_config_file(file_path=file_path)

        elif file_path.endswith("json"):
            self.__is_remove_xml_first_level = False
            self.__load_json_config_file(file_path=file_path)

        elif file_path.endswith("xml"):
            self.__load_xml_config_file(file_path=file_path, xml_parameters=xml_parameters)

        elif file_path.endswith("toml"):
            self.__is_remove_xml_first_level = False
            self.__load_toml_config_file(file_path=file_path)

    @staticmethod
    def get(key: str, value_type: Any = str, default: Any = None) -> str:
        """
        Call when object itself has request to get environment variable with/without defining class instance.

        Parameters
        ----------
        value_type: str
        key: str
            Default value if key does not found int environment variables.
        default: str
            Default value if key does not found int environment variables.

        Returns
        -------
        Value of given environment variable key.
        """
        value = os.getenv(key, default)
        value_type = json.loads if value_type == dict and (
                default not in [{}, None] or value not in [{}, None]) else value_type

        if value is None:
            value = None

        elif value_type != list:
            value = value_type(value)

        try:
            value = eval(value)

        except Exception:
            pass

        return value

    @staticmethod
    def set(key: str, value: str) -> None:
        """
        Task
        ----
        Call when request to set an environment variables with/without defining class instance.

        Parameters
        ----------
        key: str
            The key you want to set as environment variable.
        value: str
            Value to be stored in given environment variable with given key.

        Returns
        -------
        None.
        """

        os.environ[key] = value
